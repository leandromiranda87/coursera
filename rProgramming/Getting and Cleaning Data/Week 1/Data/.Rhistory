swirl()
library("swirl")
swirl()
1Ç20
1:20
pi:10
15:1
?":"
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
0
bye()
swirl()
x <- list(2, "a", "b", TRUE)
x[[2]]
x <- 1:4
y <- 2:3
x + y
x <- 4L
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x, y)
z <- rbind(x, y)
z
View(z)
x <- 1:4
y <- 2
x + y
help.start()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(10)
cachemean(1:10)
makeVector(1:10)
# I found an easy test script from the discussion forum of coursea.
# https://class.coursera.org/rprog-005/forum/thread?thread_id=140
# Cheers!
# This function creates a special "matrix" object
# that can cache its inverse.
makeCacheMatrix <- function ( x = matrix() ) {
# We cache the inverse of matrix "x"
# in the variable "inverse".
# When there's no matrix, it's supposed to be "NULL".
inverse <- NULL;
# It's a set function,
# meaning that we can set a specific matrix
# to the instance of this class of "matrix".
set <- function(y) {
x <<- y;
inverse <<- NULL;
}
# Get the matrix.
get <- function() {
x;
}
# We can directly set the inverse of the matrix.
setinverse <- function(inv) {
inverse <<- inv;
}
# We can get the inverse of the matrix.
getinverse <- function() {
inverse;
}
# Actually "makeCacheMatrix" is a list,
# or an object, or a class.
# After we instantiate the class,
# we'll get a instance with its methods.
list(	set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse
)
}
# This function computes the inverse of the special "matrix"
# returned by makeCacheMatrix above.
# If the inverse has already been calculated
# (and the matrix has not changed),
# then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
# Here we receive the parameter "x"
# as a instance of "makeCacheMatrix".
# We first check the value of inverse.
inverse <- x$getinverse();
if( !is.null(inverse) ) {
message("getting chached data");
}
else {
data <- x$get();
inverse <- x$setinverse(solve(data));
}
inverse;
## Return a matrix that is the inverse of 'x'
}
makeCacheMatrix(1Ç4)
makeCacheMatrix(1:4)
matrix <- makeCacheMatrix(1:4)
matrix
vector <- makeVector(1Ç4)
vector <- makeVector(1:4)
vector
makeVector$getmean
:vector
?vector
as.vector(data.frame(x = 1:3, y = 5:7), mode = "numeric")
data.frame(x = 1:3, y = 5:7)
(as.vector(data.frame(x = 1:3, y = 5:7), mode = "numeric"))
x <- c(a = 1, b = 2)
is.vector(x)
x
x <- c(a = 1, b = 2, c = 3)
is.vector(x)
x
makeVector(x = x)
help.start()
map("worldHires","Spain")
library(xlsx)
library(ggmap)
library(mapdata)
library(ggplot2)
set.seed(1)
rnorm(5)
set.seed(1)
rnorm(5)
getwd()
setwd("C:/Users/Carol e Le/Desktop/coursera/rProgramming/Getting and Cleaning Data/Week 1/Data")
list.files()
cameraData <- read.table(file = "cameras.csv")
cameraData <- read.table(file = "cameras.csv", sep = ",", header = TRUE)
cameraData
cameraData2 <- read.csv("camera.csv")
cameraData2 <- read.csv("cameras.csv")
cameraData2
library(xlsx)
install.packages("xlsx")
library(xlsx)
install.packages("rJava")
library(xlsx)
library(xml)
install.packages("xml")
install.packages("XML")
library(xml)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(file = fileUrl, useInternal = TRUE)
doc
rootNode <- xmlRoot(doc)
rootNode
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
xmlSApply(rootNode, xmlValue)
xpathSApply(rootNode, "//name", xmlValue)
xpathSApply(rootNode, "//price", xmlValue)
names(rootNode)
getwd()
download.files("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "./idaho.csv")
list.files()
read.csv(file = "idaho.csv", header = TRUE, sep = ",")
idahoData <- read.csv(file = "idaho.csv", header = TRUE, sep = ",")
idahoData <- read.csv(file = "idaho.csv", header = TRUE, sep = ",")
head(idahoData)
idahoData$val
idahoData$Val
idahoData$VAL
idahoData$VAL == 24
count( idahoData$VAL == 24 )
??count
count( idahoData$VAL == 24, vars == NULL )
install.packages(plyr)
install.packages("plyr")
count( idahoData$VAL == 24, vars == NULL )
library(plyr)
count( idahoData$VAL == 24, vars == NULL )
idahoVal <- idahoData$VAL == 24
count( idahoVal, vars == NULL )
count( idahoVal )
idahoData$FES
list.files()
install.packages("data.table")
list.files()
read.table(file = "DATA.gov_NGAP.xlsx", header = TRUE, sep = "")
read.xlsx("./DATA.gov_NGAP.xlsx",sheetIndex=1,header=TRUE)
library(xlsx)
library(rJava)
install.packages("rJava")
library(rJava)
library(xml)
library(XML)
fileUrl <- https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(file = fileUrl, useInternal = TRUE)
doc
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv ")
download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv ", destfile = "idahoHousing.csv")
library(fread)
install.packages("fread")
DT <- read.csv(file = "idahoHousing.csv", header = TRUE, sep = ",")
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
system.file(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.file(mean(DT[DT$SEX==1,]$pwgtp15)
)
system.file(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.file(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
