swirl()
library("swirl")
swirl()
1Ç20
1:20
pi:10
15:1
?":"
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
0
bye()
swirl()
x <- list(2, "a", "b", TRUE)
x[[2]]
x <- 1:4
y <- 2:3
x + y
x <- 4L
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x, y)
z <- rbind(x, y)
z
View(z)
x <- 1:4
y <- 2
x + y
help.start()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(10)
cachemean(1:10)
makeVector(1:10)
# I found an easy test script from the discussion forum of coursea.
# https://class.coursera.org/rprog-005/forum/thread?thread_id=140
# Cheers!
# This function creates a special "matrix" object
# that can cache its inverse.
makeCacheMatrix <- function ( x = matrix() ) {
# We cache the inverse of matrix "x"
# in the variable "inverse".
# When there's no matrix, it's supposed to be "NULL".
inverse <- NULL;
# It's a set function,
# meaning that we can set a specific matrix
# to the instance of this class of "matrix".
set <- function(y) {
x <<- y;
inverse <<- NULL;
}
# Get the matrix.
get <- function() {
x;
}
# We can directly set the inverse of the matrix.
setinverse <- function(inv) {
inverse <<- inv;
}
# We can get the inverse of the matrix.
getinverse <- function() {
inverse;
}
# Actually "makeCacheMatrix" is a list,
# or an object, or a class.
# After we instantiate the class,
# we'll get a instance with its methods.
list(	set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse
)
}
# This function computes the inverse of the special "matrix"
# returned by makeCacheMatrix above.
# If the inverse has already been calculated
# (and the matrix has not changed),
# then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
# Here we receive the parameter "x"
# as a instance of "makeCacheMatrix".
# We first check the value of inverse.
inverse <- x$getinverse();
if( !is.null(inverse) ) {
message("getting chached data");
}
else {
data <- x$get();
inverse <- x$setinverse(solve(data));
}
inverse;
## Return a matrix that is the inverse of 'x'
}
makeCacheMatrix(1Ç4)
makeCacheMatrix(1:4)
matrix <- makeCacheMatrix(1:4)
matrix
vector <- makeVector(1Ç4)
vector <- makeVector(1:4)
vector
makeVector$getmean
:vector
?vector
as.vector(data.frame(x = 1:3, y = 5:7), mode = "numeric")
data.frame(x = 1:3, y = 5:7)
(as.vector(data.frame(x = 1:3, y = 5:7), mode = "numeric"))
x <- c(a = 1, b = 2)
is.vector(x)
x
x <- c(a = 1, b = 2, c = 3)
is.vector(x)
x
makeVector(x = x)
help.start()
map("worldHires","Spain")
library(xlsx)
library(ggmap)
library(mapdata)
library(ggplot2)
set.seed(1)
rnorm(5)
set.seed(1)
rnorm(5)
getwd()
setwd(../)
setwd("../")
getwd()
ls
ls()
cd()
setwd("./coursera")
ls
setwd("./rProgramming")
getwd()
dir.create("Getting and Cleaning Data")
setwd("./Getting and Cleaning Data")
getwd()
dir.create("Week 1")
setwd("./Week 1")
getwd()
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(url = fileUrl, destfile = "./Data/cameras.csv")
dir.create("Data")
download.file(url = fileUrl, destfile = "./Data/cameras.csv")
list.files()
